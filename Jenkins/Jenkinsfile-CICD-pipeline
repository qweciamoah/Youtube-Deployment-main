pipeline {
    agent any 
    tools {
        jdk 'jdk'
        nodejs 'nodejs'
    }
    environment {
        SCANNER_HOME = tool 'sonar-scanner'
    }
    
    stages {
        stage('Cleaning Workspace') {
            steps {
                cleanWs()
            }
        }

        stage('Checkout from Git') {
            steps {
                git branch: 'main', url: 'https://github.com/gyenoch/Youtube-Deployment.git'
            }
        }

        stage('Sonarqube Analysis') {
            steps {
                withSonarQubeEnv('sonar-server') {
                    sh '''
                        $SCANNER_HOME/bin/sonar-scanner \
                        -Dsonar.projectName=Youtube \
                        -Dsonar.projectKey=Youtube
                    '''
                }
            }
        }

        stage('Quality Check') {
            steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'sonar-token' 
                }
            }
        }

        stage('Installing Dependencies') {
            steps {
                sh 'npm install'
            }
        }

        stage('Trivy File Scan') {
            steps {
                sh 'trivy fs . > trivyfs.txt'
            }
        }

        stage("Docker Build & Tag") {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker', toolName: 'docker') {   
                        sh "docker build -t youtube-clone ."
                        sh 'docker tag youtube-clone gyenoch/youtube-clone:${BUILD_NUMBER}'
                    }
                }
            }
        }

        stage('TRIVY Image Scan') {
            steps {
                sh 'trivy image gyenoch/youtube-clone:${BUILD_NUMBER} > trivyimage.txt' 
            }
        }

        stage("Docker Push") {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker', toolName: 'docker') {   
                        sh 'docker push gyenoch/youtube-clone:${BUILD_NUMBER}'
                    }
                }
            }
        }

        stage("Remove container") {
            steps {
                sh "docker stop youtube-clone || true"
                sh "docker rm youtube-clone || true"
            }
        }

        stage('Deploy to container') {
            steps {
                sh 'docker run -d --name youtube-clone -p 3000:3000 gyenoch/youtube-clone:${BUILD_NUMBER}'
            }
        }

        stage('Update Deployment file') {
            environment {
                GIT_REPO_NAME = "Youtube-Deployment"
                GIT_USER_NAME = "gyenoch"
            }
            steps {
                dir('.') {
                    withCredentials([string(credentialsId: 'github', variable: 'GITHUB_APP')]) {
                        sh '''
                            git config user.email "www.gyenoch@gmail.com"
                            git config user.name "gyenoch"
                            
                            # Extract current image tag from deployment.yml
                            imageTag=$(grep 'image:\\s*gyenoch/youtube-clone:' deployment.yml | sed 's/.*gyenoch\\/youtube-clone:\\([^ ]*\\)/\\1/')
                            echo "Current image tag: $imageTag"
                            
                            # Replace the old image tag with the new BUILD_NUMBER
                            sed -i "s|gyenoch/youtube-clone:$imageTag|gyenoch/youtube-clone:${BUILD_NUMBER}|" deployment.yml
                            
                            # Commit and push the changes to the GitHub repository
                            git add deployment.yml
                            git commit -m "Update deployment image to version ${BUILD_NUMBER}"
                            git push https://${GITHUB_APP}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                        '''
                    }
                }
            }
        }

        stage('Deploying Youtube Application') {
            steps {
                withAWS(credentials: 'aws-key', region: 'us-east-1') {
                    dir('.') {
                        script {
                            sh 'aws eks update-kubeconfig --name EKS_CLOUD --region us-east-1'
                            sh 'kubectl apply -f deployment.yml --validate=false'
                        }
                    }
                }
            }
        }

    }

    post {
        success {
            slackSend(channel: 'jenkins-slack-notification', color: 'good', message: "Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL}) was successful.")
        }
        failure {
            slackSend(channel: 'jenkins-slack-notification', color: 'danger', message: "Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL}) failed.")
        }
        always {
            echo 'Build finished, check Slack for notifications.'
        }
    }
}
